{"ast":null,"code":"import axios from \"axios\";\nimport serviceConfig from \"../config/service.js\";\nimport qs from \"qs\";\n\n// 创建 axios 请求实例\nconst serviceAxios = axios.create({\n  baseURL: serviceConfig.baseURI,\n  // 基础请求地址\n  timeout: 10000,\n  // 请求超时设置\n  withCredentials: false // 跨域请求是否需要携带 cookie\n});\n\n// 创建请求拦截\nserviceAxios.interceptors.request.use(config => {\n  // 如果开启 token 认证\n  //   if (serverConfig.useTokenAuthorization) {\n  //     config.headers[\"Authorization\"] = localStorage.getItem(\"token\"); // 请求头携带 token\n  //   }\n  // 设置请求头\n  if (!config.headers[\"content-type\"]) {\n    // 如果没有设置请求头\n    if (config.method === 'post') {\n      config.headers[\"content-type\"] = \"application/x-www-form-urlencoded\"; // post 请求\n      config.data = qs.stringify(config.data); // 序列化,比如表单数据\n    } else {\n      config.headers[\"content-type\"] = \"application/json\"; // 默认类型\n    }\n  }\n  //   console.log(\"请求配置\", config);\n  return config;\n}, error => {\n  Promise.reject(error);\n});\n\n// 创建响应拦截\nserviceAxios.interceptors.response.use(res => {\n  let data = res.data;\n  // 处理自己的业务逻辑，比如判断 token 是否过期等等\n  // 代码块\n  return data;\n}, error => {\n  let message = \"\";\n  if (error && error.response) {\n    switch (error.response.status) {\n      case 302:\n        message = \"接口重定向了！\";\n        break;\n      case 400:\n        message = \"参数不正确！\";\n        break;\n      case 401:\n        message = \"您未登录，或者登录已经超时，请先登录！\";\n        break;\n      case 403:\n        message = \"您没有权限操作！\";\n        break;\n      case 404:\n        message = `请求地址出错: ${error.response.config.url}`;\n        break;\n      case 408:\n        message = \"请求超时！\";\n        break;\n      case 409:\n        message = \"系统已存在相同数据！\";\n        break;\n      case 500:\n        message = \"服务器内部错误！\";\n        break;\n      case 501:\n        message = \"服务未实现！\";\n        break;\n      case 502:\n        message = \"网关错误！\";\n        break;\n      case 503:\n        message = \"服务不可用！\";\n        break;\n      case 504:\n        message = \"服务暂时无法访问，请稍后再试！\";\n        break;\n      case 505:\n        message = \"HTTP 版本不受支持！\";\n        break;\n      default:\n        message = \"异常问题，请联系管理员！\";\n        break;\n    }\n  }\n  return Promise.reject(message);\n});\nexport default serviceAxios;","map":{"version":3,"names":["axios","serviceConfig","qs","serviceAxios","create","baseURL","baseURI","timeout","withCredentials","interceptors","request","use","config","headers","method","data","stringify","error","Promise","reject","response","res","message","status","url"],"sources":["/Users/william/0_GIT/customer-service/src/axios/serviceAxios.js"],"sourcesContent":["import axios from \"axios\";\nimport serviceConfig from \"../config/service.js\";\nimport qs from \"qs\";\n\n// 创建 axios 请求实例\nconst serviceAxios = axios.create({\n    baseURL: serviceConfig.baseURI,// 基础请求地址\n    timeout: 10000, // 请求超时设置\n    withCredentials: false, // 跨域请求是否需要携带 cookie\n});\n\n\n// 创建请求拦截\nserviceAxios.interceptors.request.use(\n    (config) => {\n      // 如果开启 token 认证\n    //   if (serverConfig.useTokenAuthorization) {\n    //     config.headers[\"Authorization\"] = localStorage.getItem(\"token\"); // 请求头携带 token\n    //   }\n      // 设置请求头\n      if(!config.headers[\"content-type\"]) { // 如果没有设置请求头\n        if(config.method === 'post') {\n          config.headers[\"content-type\"] = \"application/x-www-form-urlencoded\"; // post 请求\n          config.data = qs.stringify(config.data); // 序列化,比如表单数据\n        } else {\n          config.headers[\"content-type\"] = \"application/json\"; // 默认类型\n        }\n      }\n    //   console.log(\"请求配置\", config);\n      return config;\n    },\n    (error) => {\n      Promise.reject(error);\n    }\n);\n\n// 创建响应拦截\nserviceAxios.interceptors.response.use(\n    (res) => {\n      let data = res.data;\n      // 处理自己的业务逻辑，比如判断 token 是否过期等等\n      // 代码块\n      return data;\n    },\n    (error) => {\n      let message = \"\";\n      if (error && error.response) {\n        switch (error.response.status) {\n          case 302:\n            message = \"接口重定向了！\";\n            break;\n          case 400:\n            message = \"参数不正确！\";\n            break;\n          case 401:\n            message = \"您未登录，或者登录已经超时，请先登录！\";\n            break;\n          case 403:\n            message = \"您没有权限操作！\";\n            break;\n          case 404:\n            message = `请求地址出错: ${error.response.config.url}`;\n            break;\n          case 408:\n            message = \"请求超时！\";\n            break;\n          case 409:\n            message = \"系统已存在相同数据！\";\n            break;\n          case 500:\n            message = \"服务器内部错误！\";\n            break;\n          case 501:\n            message = \"服务未实现！\";\n            break;\n          case 502:\n            message = \"网关错误！\";\n            break;\n          case 503:\n            message = \"服务不可用！\";\n            break;\n          case 504:\n            message = \"服务暂时无法访问，请稍后再试！\";\n            break;\n          case 505:\n            message = \"HTTP 版本不受支持！\";\n            break;\n          default:\n            message = \"异常问题，请联系管理员！\";\n            break;\n        }\n      }\n      return Promise.reject(message);\n    }\n);\n\nexport default serviceAxios\n\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,sBAAsB;AAChD,OAAOC,EAAE,MAAM,IAAI;;AAEnB;AACA,MAAMC,YAAY,GAAGH,KAAK,CAACI,MAAM,CAAC;EAC9BC,OAAO,EAAEJ,aAAa,CAACK,OAAO;EAAC;EAC/BC,OAAO,EAAE,KAAK;EAAE;EAChBC,eAAe,EAAE,KAAK,CAAE;AAC5B,CAAC,CAAC;;AAGF;AACAL,YAAY,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAChCC,MAAM,IAAK;EACV;EACF;EACA;EACA;EACE;EACA,IAAG,CAACA,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC,EAAE;IAAE;IACpC,IAAGD,MAAM,CAACE,MAAM,KAAK,MAAM,EAAE;MAC3BF,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,mCAAmC,CAAC,CAAC;MACtED,MAAM,CAACG,IAAI,GAAGb,EAAE,CAACc,SAAS,CAACJ,MAAM,CAACG,IAAI,CAAC,CAAC,CAAC;IAC3C,CAAC,MAAM;MACLH,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,kBAAkB,CAAC,CAAC;IACvD;EACF;EACF;EACE,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACTC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AACvB,CAAC,CACJ;;AAED;AACAd,YAAY,CAACM,YAAY,CAACW,QAAQ,CAACT,GAAG,CACjCU,GAAG,IAAK;EACP,IAAIN,IAAI,GAAGM,GAAG,CAACN,IAAI;EACnB;EACA;EACA,OAAOA,IAAI;AACb,CAAC,EACAE,KAAK,IAAK;EACT,IAAIK,OAAO,GAAG,EAAE;EAChB,IAAIL,KAAK,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAC3B,QAAQH,KAAK,CAACG,QAAQ,CAACG,MAAM;MAC3B,KAAK,GAAG;QACND,OAAO,GAAG,SAAS;QACnB;MACF,KAAK,GAAG;QACNA,OAAO,GAAG,QAAQ;QAClB;MACF,KAAK,GAAG;QACNA,OAAO,GAAG,qBAAqB;QAC/B;MACF,KAAK,GAAG;QACNA,OAAO,GAAG,UAAU;QACpB;MACF,KAAK,GAAG;QACNA,OAAO,GAAI,WAAUL,KAAK,CAACG,QAAQ,CAACR,MAAM,CAACY,GAAI,EAAC;QAChD;MACF,KAAK,GAAG;QACNF,OAAO,GAAG,OAAO;QACjB;MACF,KAAK,GAAG;QACNA,OAAO,GAAG,YAAY;QACtB;MACF,KAAK,GAAG;QACNA,OAAO,GAAG,UAAU;QACpB;MACF,KAAK,GAAG;QACNA,OAAO,GAAG,QAAQ;QAClB;MACF,KAAK,GAAG;QACNA,OAAO,GAAG,OAAO;QACjB;MACF,KAAK,GAAG;QACNA,OAAO,GAAG,QAAQ;QAClB;MACF,KAAK,GAAG;QACNA,OAAO,GAAG,iBAAiB;QAC3B;MACF,KAAK,GAAG;QACNA,OAAO,GAAG,cAAc;QACxB;MACF;QACEA,OAAO,GAAG,cAAc;QACxB;IAAM;EAEZ;EACA,OAAOJ,OAAO,CAACC,MAAM,CAACG,OAAO,CAAC;AAChC,CAAC,CACJ;AAED,eAAenB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}